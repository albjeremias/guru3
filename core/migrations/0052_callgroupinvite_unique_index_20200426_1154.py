# Generated by Django 2.1.14 on 2020-04-26 11:54
from functools import reduce
from itertools import groupby
import operator


from django.db import migrations, transaction
from django.db.models import Count, Q


def make_callgroup_invite_unique(apps, schema_editor):
    CallGroupInvite = apps.get_model("core", "CallGroupInvite")

    db_alias = schema_editor.connection.alias

    print("Initiate CallGroupInvite cleanup...")
    with transaction.atomic():
        # first we retrieve all offenders
        offending_invites = CallGroupInvite.objects.using(db_alias) \
                                           .values("group", "extension") \
                                           .annotate(duplicate_count=Count("group")) \
                                           .filter(duplicate_count__gt=1)
        print("Found {} offending pairs".format(len(offending_invites)))
        if len(offending_invites) == 0:
            return  # we are done here
        # next we need to heal the offenders
        queries = [Q(group=entry["group"], extension=entry["extension"]) for entry in offending_invites]
        all_offending_invites = CallGroupInvite.objects.using(db_alias).filter(reduce(operator.or_, queries)) \
                                                                       .order_by("group", "extension")

        print("Retrieved total {} records for cleanup".format(len(all_offending_invites)))
        delete_ids = []
        for k, elems in groupby(all_offending_invites, key=lambda invite: (invite.group_id, invite.extension_id)):
            keep_id = None
            all_ids = []
            for elem in elems:
                all_ids.append(elem.pk)
                if keep_id is None:
                    keep_id = elem.pk
                if elem.accepted:
                    keep_id = elem.pk
            all_ids.remove(keep_id)
            print("Pair group={}, extension={}, keep record pk={}".format(k[0], k[1], keep_id))
            delete_ids.extend(all_ids)

        print("Deleting objects: {}".format(delete_ids))
        CallGroupInvite.objects.filter(pk__in=delete_ids).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0051_auto_20200426_1124'),
    ]

    operations = [
        migrations.RunPython(make_callgroup_invite_unique),
        migrations.AlterUniqueTogether(
            name='callgroupinvite',
            unique_together={('group', 'extension')},
        ),
    ]
